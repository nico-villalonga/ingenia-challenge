import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import type { ProductsApiResponse } from "@/types"

interface Category {
  slug: string
  name: string
  url: string
}

type CategoriesApiResponse = Category[]

interface LimitQuery {
  limit: number
  skip: number
}

export const productsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com/products" }),
  reducerPath: "productsApi",
  tagTypes: ["Products"],
  endpoints: (build) => ({
    getAllProducts: build.query<ProductsApiResponse, LimitQuery>({
      query: ({ limit = 30, skip = 0 }) => `?limit=${limit}&skip=${skip}`,
      providesTags: (_result, _error, params) => [
        { type: "Products", ...params },
      ],
    }),

    getProductCategories: build.query<CategoriesApiResponse, void>({
      query: () => "/categories",
    }),

    getProductsByCategory: build.query<
      ProductsApiResponse,
      LimitQuery & { category: string }
    >({
      query: ({ category, limit, skip }) =>
        `/category/${category}?limit=${limit}&skip=${skip}`,
      providesTags: (_result, _error, params) => [
        { type: "Products", ...params },
      ],
    }),

    searchProducts: build.query<
      ProductsApiResponse,
      LimitQuery & { query: string }
    >({
      query: ({ query, limit, skip }) =>
        `/search?q=${query}&limit=${limit}&skip=${skip}`,
      providesTags: (_result, _error, params) => [
        { type: "Products", ...params },
      ],
    }),
  }),
})

/**
 * Hooks are auto-generated by RTK-Query
 * Same as `productsApiSlice.endpoints.getAlProducts.useQuery`
 */
export const {
  useGetAllProductsQuery,
  useGetProductCategoriesQuery,
  useGetProductsByCategoryQuery,
  useSearchProductsQuery,
} = productsApiSlice
